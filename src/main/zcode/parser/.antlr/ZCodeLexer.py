# Generated from c://Users//Tung Nguyen//OneDrive//Máy tính//HK232//PPL//assignment//src//main//zcode//parser//ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,51,396,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,1,0,1,
        0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,
        5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
        1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
        1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,
        1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,
        1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,
        1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,33,
        1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,37,1,37,
        1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,5,41,281,8,41,10,41,12,41,
        284,9,41,1,42,4,42,287,8,42,11,42,12,42,288,1,42,1,42,3,42,293,8,
        42,1,42,3,42,296,8,42,3,42,298,8,42,1,43,1,43,1,44,1,44,1,45,1,45,
        3,45,306,8,45,1,45,4,45,309,8,45,11,45,12,45,310,1,46,1,46,5,46,
        315,8,46,10,46,12,46,318,9,46,1,47,1,47,3,47,322,8,47,1,48,1,48,
        1,48,5,48,327,8,48,10,48,12,48,330,9,48,1,48,1,48,1,48,1,49,1,49,
        1,49,1,49,3,49,339,8,49,1,50,1,50,1,51,1,51,1,52,1,52,1,52,1,52,
        5,52,349,8,52,10,52,12,52,352,9,52,1,52,1,52,1,53,4,53,357,8,53,
        11,53,12,53,358,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,55,5,55,369,
        8,55,10,55,12,55,372,9,55,1,55,1,55,1,55,3,55,377,8,55,1,55,1,55,
        1,56,1,56,1,56,5,56,384,8,56,10,56,12,56,387,9,56,1,56,1,56,1,56,
        1,57,1,57,1,57,3,57,395,8,57,0,0,58,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
        81,41,83,42,85,43,87,0,89,0,91,0,93,0,95,44,97,45,99,0,101,0,103,
        46,105,47,107,48,109,49,111,50,113,51,115,0,1,0,12,3,0,65,90,95,
        95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,2,0,43,43,45,45,
        2,0,69,69,101,101,7,0,39,39,92,92,98,98,102,102,110,110,114,114,
        116,116,4,0,10,10,12,13,34,34,92,92,1,0,10,10,2,0,10,10,12,13,3,
        0,8,9,12,13,32,32,1,1,10,10,1,0,12,13,408,0,1,1,0,0,0,0,3,1,0,0,
        0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
        0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
        0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
        0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,
        0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,
        0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,
        0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,
        0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,
        0,85,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,
        0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,1,117,
        1,0,0,0,3,122,1,0,0,0,5,128,1,0,0,0,7,135,1,0,0,0,9,140,1,0,0,0,
        11,147,1,0,0,0,13,154,1,0,0,0,15,158,1,0,0,0,17,166,1,0,0,0,19,171,
        1,0,0,0,21,175,1,0,0,0,23,181,1,0,0,0,25,184,1,0,0,0,27,190,1,0,
        0,0,29,199,1,0,0,0,31,202,1,0,0,0,33,207,1,0,0,0,35,212,1,0,0,0,
        37,218,1,0,0,0,39,222,1,0,0,0,41,226,1,0,0,0,43,230,1,0,0,0,45,233,
        1,0,0,0,47,235,1,0,0,0,49,237,1,0,0,0,51,239,1,0,0,0,53,241,1,0,
        0,0,55,243,1,0,0,0,57,245,1,0,0,0,59,248,1,0,0,0,61,251,1,0,0,0,
        63,253,1,0,0,0,65,256,1,0,0,0,67,258,1,0,0,0,69,261,1,0,0,0,71,265,
        1,0,0,0,73,268,1,0,0,0,75,270,1,0,0,0,77,272,1,0,0,0,79,274,1,0,
        0,0,81,276,1,0,0,0,83,278,1,0,0,0,85,286,1,0,0,0,87,299,1,0,0,0,
        89,301,1,0,0,0,91,303,1,0,0,0,93,312,1,0,0,0,95,321,1,0,0,0,97,323,
        1,0,0,0,99,338,1,0,0,0,101,340,1,0,0,0,103,342,1,0,0,0,105,344,1,
        0,0,0,107,356,1,0,0,0,109,362,1,0,0,0,111,365,1,0,0,0,113,380,1,
        0,0,0,115,394,1,0,0,0,117,118,5,116,0,0,118,119,5,114,0,0,119,120,
        5,117,0,0,120,121,5,101,0,0,121,2,1,0,0,0,122,123,5,102,0,0,123,
        124,5,97,0,0,124,125,5,108,0,0,125,126,5,115,0,0,126,127,5,101,0,
        0,127,4,1,0,0,0,128,129,5,110,0,0,129,130,5,117,0,0,130,131,5,109,
        0,0,131,132,5,98,0,0,132,133,5,101,0,0,133,134,5,114,0,0,134,6,1,
        0,0,0,135,136,5,98,0,0,136,137,5,111,0,0,137,138,5,111,0,0,138,139,
        5,108,0,0,139,8,1,0,0,0,140,141,5,115,0,0,141,142,5,116,0,0,142,
        143,5,114,0,0,143,144,5,105,0,0,144,145,5,110,0,0,145,146,5,103,
        0,0,146,10,1,0,0,0,147,148,5,114,0,0,148,149,5,101,0,0,149,150,5,
        116,0,0,150,151,5,117,0,0,151,152,5,114,0,0,152,153,5,110,0,0,153,
        12,1,0,0,0,154,155,5,118,0,0,155,156,5,97,0,0,156,157,5,114,0,0,
        157,14,1,0,0,0,158,159,5,100,0,0,159,160,5,121,0,0,160,161,5,110,
        0,0,161,162,5,97,0,0,162,163,5,109,0,0,163,164,5,105,0,0,164,165,
        5,99,0,0,165,16,1,0,0,0,166,167,5,102,0,0,167,168,5,117,0,0,168,
        169,5,110,0,0,169,170,5,99,0,0,170,18,1,0,0,0,171,172,5,102,0,0,
        172,173,5,111,0,0,173,174,5,114,0,0,174,20,1,0,0,0,175,176,5,117,
        0,0,176,177,5,110,0,0,177,178,5,116,0,0,178,179,5,105,0,0,179,180,
        5,108,0,0,180,22,1,0,0,0,181,182,5,98,0,0,182,183,5,121,0,0,183,
        24,1,0,0,0,184,185,5,98,0,0,185,186,5,114,0,0,186,187,5,101,0,0,
        187,188,5,97,0,0,188,189,5,107,0,0,189,26,1,0,0,0,190,191,5,99,0,
        0,191,192,5,111,0,0,192,193,5,110,0,0,193,194,5,116,0,0,194,195,
        5,105,0,0,195,196,5,110,0,0,196,197,5,117,0,0,197,198,5,101,0,0,
        198,28,1,0,0,0,199,200,5,105,0,0,200,201,5,102,0,0,201,30,1,0,0,
        0,202,203,5,101,0,0,203,204,5,108,0,0,204,205,5,115,0,0,205,206,
        5,101,0,0,206,32,1,0,0,0,207,208,5,101,0,0,208,209,5,108,0,0,209,
        210,5,105,0,0,210,211,5,102,0,0,211,34,1,0,0,0,212,213,5,98,0,0,
        213,214,5,101,0,0,214,215,5,103,0,0,215,216,5,105,0,0,216,217,5,
        110,0,0,217,36,1,0,0,0,218,219,5,101,0,0,219,220,5,110,0,0,220,221,
        5,100,0,0,221,38,1,0,0,0,222,223,5,110,0,0,223,224,5,111,0,0,224,
        225,5,116,0,0,225,40,1,0,0,0,226,227,5,97,0,0,227,228,5,110,0,0,
        228,229,5,100,0,0,229,42,1,0,0,0,230,231,5,111,0,0,231,232,5,114,
        0,0,232,44,1,0,0,0,233,234,5,43,0,0,234,46,1,0,0,0,235,236,5,45,
        0,0,236,48,1,0,0,0,237,238,5,42,0,0,238,50,1,0,0,0,239,240,5,47,
        0,0,240,52,1,0,0,0,241,242,5,37,0,0,242,54,1,0,0,0,243,244,5,61,
        0,0,244,56,1,0,0,0,245,246,5,60,0,0,246,247,5,45,0,0,247,58,1,0,
        0,0,248,249,5,33,0,0,249,250,5,61,0,0,250,60,1,0,0,0,251,252,5,60,
        0,0,252,62,1,0,0,0,253,254,5,60,0,0,254,255,5,61,0,0,255,64,1,0,
        0,0,256,257,5,62,0,0,257,66,1,0,0,0,258,259,5,62,0,0,259,260,5,61,
        0,0,260,68,1,0,0,0,261,262,5,46,0,0,262,263,5,46,0,0,263,264,5,46,
        0,0,264,70,1,0,0,0,265,266,5,61,0,0,266,267,5,61,0,0,267,72,1,0,
        0,0,268,269,5,40,0,0,269,74,1,0,0,0,270,271,5,41,0,0,271,76,1,0,
        0,0,272,273,5,91,0,0,273,78,1,0,0,0,274,275,5,93,0,0,275,80,1,0,
        0,0,276,277,5,44,0,0,277,82,1,0,0,0,278,282,7,0,0,0,279,281,7,1,
        0,0,280,279,1,0,0,0,281,284,1,0,0,0,282,280,1,0,0,0,282,283,1,0,
        0,0,283,84,1,0,0,0,284,282,1,0,0,0,285,287,3,87,43,0,286,285,1,0,
        0,0,287,288,1,0,0,0,288,286,1,0,0,0,288,289,1,0,0,0,289,297,1,0,
        0,0,290,298,3,93,46,0,291,293,3,93,46,0,292,291,1,0,0,0,292,293,
        1,0,0,0,293,295,1,0,0,0,294,296,3,91,45,0,295,294,1,0,0,0,295,296,
        1,0,0,0,296,298,1,0,0,0,297,290,1,0,0,0,297,292,1,0,0,0,298,86,1,
        0,0,0,299,300,7,2,0,0,300,88,1,0,0,0,301,302,7,3,0,0,302,90,1,0,
        0,0,303,305,7,4,0,0,304,306,3,89,44,0,305,304,1,0,0,0,305,306,1,
        0,0,0,306,308,1,0,0,0,307,309,3,87,43,0,308,307,1,0,0,0,309,310,
        1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,92,1,0,0,0,312,316,5,
        46,0,0,313,315,3,87,43,0,314,313,1,0,0,0,315,318,1,0,0,0,316,314,
        1,0,0,0,316,317,1,0,0,0,317,94,1,0,0,0,318,316,1,0,0,0,319,322,3,
        1,0,0,320,322,3,3,1,0,321,319,1,0,0,0,321,320,1,0,0,0,322,96,1,0,
        0,0,323,328,5,34,0,0,324,327,3,101,50,0,325,327,3,99,49,0,326,324,
        1,0,0,0,326,325,1,0,0,0,327,330,1,0,0,0,328,326,1,0,0,0,328,329,
        1,0,0,0,329,331,1,0,0,0,330,328,1,0,0,0,331,332,5,34,0,0,332,333,
        6,48,0,0,333,98,1,0,0,0,334,335,5,92,0,0,335,339,7,5,0,0,336,337,
        5,39,0,0,337,339,5,34,0,0,338,334,1,0,0,0,338,336,1,0,0,0,339,100,
        1,0,0,0,340,341,8,6,0,0,341,102,1,0,0,0,342,343,7,7,0,0,343,104,
        1,0,0,0,344,345,5,35,0,0,345,346,5,35,0,0,346,350,1,0,0,0,347,349,
        8,8,0,0,348,347,1,0,0,0,349,352,1,0,0,0,350,348,1,0,0,0,350,351,
        1,0,0,0,351,353,1,0,0,0,352,350,1,0,0,0,353,354,6,52,1,0,354,106,
        1,0,0,0,355,357,7,9,0,0,356,355,1,0,0,0,357,358,1,0,0,0,358,356,
        1,0,0,0,358,359,1,0,0,0,359,360,1,0,0,0,360,361,6,53,1,0,361,108,
        1,0,0,0,362,363,9,0,0,0,363,364,6,54,2,0,364,110,1,0,0,0,365,370,
        5,34,0,0,366,369,3,101,50,0,367,369,3,99,49,0,368,366,1,0,0,0,368,
        367,1,0,0,0,369,372,1,0,0,0,370,368,1,0,0,0,370,371,1,0,0,0,371,
        376,1,0,0,0,372,370,1,0,0,0,373,374,5,13,0,0,374,377,5,10,0,0,375,
        377,7,10,0,0,376,373,1,0,0,0,376,375,1,0,0,0,377,378,1,0,0,0,378,
        379,6,55,3,0,379,112,1,0,0,0,380,385,5,34,0,0,381,384,3,101,50,0,
        382,384,3,99,49,0,383,381,1,0,0,0,383,382,1,0,0,0,384,387,1,0,0,
        0,385,383,1,0,0,0,385,386,1,0,0,0,386,388,1,0,0,0,387,385,1,0,0,
        0,388,389,3,115,57,0,389,390,6,56,4,0,390,114,1,0,0,0,391,395,7,
        11,0,0,392,393,5,92,0,0,393,395,8,5,0,0,394,391,1,0,0,0,394,392,
        1,0,0,0,395,116,1,0,0,0,21,0,282,288,292,295,297,305,310,316,321,
        326,328,338,350,358,368,370,376,383,385,394,5,1,48,0,6,0,0,1,54,
        1,1,55,2,1,56,3
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    TRUE = 1
    FALSE = 2
    NUMBER = 3
    BOOL = 4
    STRING = 5
    RETURN = 6
    VAR = 7
    DYNAMIC = 8
    FUNC = 9
    FOR = 10
    UNTIL = 11
    BY = 12
    BREAK = 13
    CONTINUE = 14
    IF = 15
    ELSE = 16
    ELIF = 17
    BEGIN = 18
    END = 19
    NOT = 20
    AND = 21
    OR = 22
    ADD = 23
    SUB = 24
    MUL = 25
    DIV = 26
    MOD = 27
    EQUAL = 28
    ASSIGN = 29
    NOT_EQUAL = 30
    LT = 31
    LE = 32
    GT = 33
    GE = 34
    CONCAT_STR = 35
    COMPARE_STR = 36
    LR_BRACKET = 37
    RR_BRACKET = 38
    LS_BRACKET = 39
    RS_BRACKET = 40
    COMMA = 41
    ID = 42
    NUMBER_LIT = 43
    BOOL_LIT = 44
    STRING_LIT = 45
    NEWLINE = 46
    COMMENTS = 47
    WS = 48
    ERROR_CHAR = 49
    UNCLOSE_STRING = 50
    ILLEGAL_ESCAPE = 51

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'true'", "'false'", "'number'", "'bool'", "'string'", "'return'", 
            "'var'", "'dynamic'", "'func'", "'for'", "'until'", "'by'", 
            "'break'", "'continue'", "'if'", "'else'", "'elif'", "'begin'", 
            "'end'", "'not'", "'and'", "'or'", "'+'", "'-'", "'*'", "'/'", 
            "'%'", "'='", "'<-'", "'!='", "'<'", "'<='", "'>'", "'>='", 
            "'...'", "'=='", "'('", "')'", "'['", "']'", "','" ]

    symbolicNames = [ "<INVALID>",
            "TRUE", "FALSE", "NUMBER", "BOOL", "STRING", "RETURN", "VAR", 
            "DYNAMIC", "FUNC", "FOR", "UNTIL", "BY", "BREAK", "CONTINUE", 
            "IF", "ELSE", "ELIF", "BEGIN", "END", "NOT", "AND", "OR", "ADD", 
            "SUB", "MUL", "DIV", "MOD", "EQUAL", "ASSIGN", "NOT_EQUAL", 
            "LT", "LE", "GT", "GE", "CONCAT_STR", "COMPARE_STR", "LR_BRACKET", 
            "RR_BRACKET", "LS_BRACKET", "RS_BRACKET", "COMMA", "ID", "NUMBER_LIT", 
            "BOOL_LIT", "STRING_LIT", "NEWLINE", "COMMENTS", "WS", "ERROR_CHAR", 
            "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    ruleNames = [ "TRUE", "FALSE", "NUMBER", "BOOL", "STRING", "RETURN", 
                  "VAR", "DYNAMIC", "FUNC", "FOR", "UNTIL", "BY", "BREAK", 
                  "CONTINUE", "IF", "ELSE", "ELIF", "BEGIN", "END", "NOT", 
                  "AND", "OR", "ADD", "SUB", "MUL", "DIV", "MOD", "EQUAL", 
                  "ASSIGN", "NOT_EQUAL", "LT", "LE", "GT", "GE", "CONCAT_STR", 
                  "COMPARE_STR", "LR_BRACKET", "RR_BRACKET", "LS_BRACKET", 
                  "RS_BRACKET", "COMMA", "ID", "NUMBER_LIT", "DIGIT", "SIGN", 
                  "EXPONENT", "DECIMAL", "BOOL_LIT", "STRING_LIT", "VALID_ESCAPE", 
                  "VALID_SEQUENCE", "NEWLINE", "COMMENTS", "WS", "ERROR_CHAR", 
                  "UNCLOSE_STRING", "ILLEGAL_ESCAPE", "INVALID_ESCAPE" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[48] = self.STRING_LIT_action 
            actions[54] = self.ERROR_CHAR_action 
            actions[55] = self.UNCLOSE_STRING_action 
            actions[56] = self.ILLEGAL_ESCAPE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRING_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text[1:-1];
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            raise ErrorToken(self.text)
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
             
                if(len(self.text) >= 2 and self.text[-1] == '\n' and self.text[-2] == '\r'):
                    raise UncloseString(self.text[1:-2])
                elif (self.text[-1] == '\n'):
                    raise UncloseString(self.text[1:-1])
                else:
                    raise UncloseString(self.text[1:])

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            raise IllegalEscape(self.text[1:])
     


